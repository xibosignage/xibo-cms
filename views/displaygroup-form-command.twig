{#
/**
 * Copyright (C) 2025 Xibo Signage Ltd
 *
 * Xibo - Digital Signage - http://www.xibo.org.uk
 *
 * This file is part of Xibo.
 *
 * Xibo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * Xibo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.
 */
#}

{% extends "form-base.twig" %}
{% import "forms.twig" as forms %}

{% block formTitle %}
    {% trans "Send Command" %}
{% endblock %}

{% block formButtons %}
    {% trans "Cancel" %}, XiboDialogClose()
    {% trans "Save" %}, $("#displayGroupCommandForm").submit()
{% endblock %}

{% block formHtml %}
    <div class="row">
        <div class="col-md-12">
            <form id="displayGroupCommandForm" class="XiboForm form-horizontal" method="post" action="{{ url_for("displayGroup.action.command", {"id": displayGroup.displayGroupId}) }}">
                {% set title %}{% trans "Command" %}{% endset %}
                {% set helpText %}{% trans "Pick a command to send to the Player. If the CMS has XMR enabled this will be sent immediately, otherwise it will show an error." %}{% endset %}
                {{ forms.dropdown("commandId", "single", title, 1, commands, "commandId", "command", helpText) }}

                {% set title %}{% trans "Pro-mode" %}{% endset %}
                {% set helpText %}{% trans "Switch Mode" %}{% endset %}
                {{ forms.switch("mode", title, 1, helpText, "", "", "", "", "commandGroup") }}

                {% set title %}{% trans "Screen" %}{% endset %}
                {% set helpText %}{% trans "Screen" %}{% endset %}
                {{ forms.switch("screen", title, 1, helpText, "", "", "", "", "commandGroup") }}

                {% set title %}{% trans "Mute" %}{% endset %}
                {% set helpText %}{% trans "Mute" %}{% endset %}
                {{ forms.switch("mute", title, 1, helpText, "", "", "", "", "commandGroup") }}

                {% set title %}{% trans "Brightness" %}{% endset %}
                {% set helpText %}{% trans "Brightness level (0-50)" %}{% endset %}
                {{ forms.number("brightness", title, "", helpText, "commandGroup", "", "", "50", "0") }}

                {% set title %}{% trans "Rotation" %}{% endset %}
                {% set helpText %}{% trans "Screen rotation" %}{% endset %}
                {% set options = [
                    { id: "90", value: "90°" },
                    { id: "180", value: "180°" },
                ] %}
                {{ forms.dropdown("rotation", "single", title, "", options, "id", "value", helpText, "commandGroup") }}

                {% set title %}{% trans "Options" %}{% endset %}
                {% set powerScheduleMode %}{% trans "Options" %}{% endset %}
                {% set helpText %}{% trans "Set the power schedule to Off, or enable it for Daily or Weekly intervals" %}{% endset %}
                {% set options = [
                    { id: "off", value: "Off" },
                    { id: "daily", value: "Daily" },
                    { id: "weekly", value: "Weekly" }
                ] %}
                {{ forms.dropdown("powerScheduleMode", "single", title, "", options, "id", "value", helpText, "commandGroup", "required") }}

                {% set helpText %}{% trans "Use the drop-down to select which days of the week it should use the power schedule." %}{% endset %}
                {% set monday %}{% trans "Monday" %}{% endset %}
                {% set tuesday %}{% trans "Tuesday" %}{% endset %}
                {% set wednesday %}{% trans "Wednesday" %}{% endset %}
                {% set thursday %}{% trans "Thursday" %}{% endset %}
                {% set friday %}{% trans "Friday" %}{% endset %}
                {% set saturday %}{% trans "Saturday" %}{% endset %}
                {% set sunday %}{% trans "Sunday" %}{% endset %}
                {% set options = [
                    { optionid: 'mon', option: monday },
                    { optionid: 'tue', option: tuesday },
                    { optionid: 'wed', option: wednesday },
                    { optionid: 'thu', option: thursday },
                    { optionid: 'fri', option: friday },
                    { optionid: 'sat', option: saturday },
                    { optionid: 'sun', option: sunday },
                ] %}
                {{ forms.dropdown("powerScheduleDays[]", "dropdownmulti", title, "", options, "optionid", "option", helpText, "power-schedule-days", "required") }}

                {{ forms.hidden("daysOfTheWeek") }}

                {% set title %}{% trans "On Time" %}{% endset %}
                {% set helpText %}{% trans "Enter the On Time schedule" %}{% endset %}
                {{ forms.time("onTime", title, "00:00", helpText, "onTime", "required") }}

                {% set title %}{% trans "Off Time" %}{% endset %}
                {% set helpText %}{% trans "Enter the Off Time schedule." %}{% endset %}
                {{ forms.time("offTime", title, "00:00", helpText, "offTime", "required") }}
            </form>
        </div>
    </div>

    <script type="text/javascript" nonce="{{ cspNonce }}">
        $(document).ready(function() {
            const commands = $('.commandGroup, .onTime, .offTime, .power-schedule-days');
            const $powerSchedule = $('select[name="powerScheduleMode"]');
            const $daysOfTheWeek = $('input[name="daysOfTheWeek"]');
            const $powerScheduleDays = $('select[name="powerScheduleDays[]"]');

            // Hide and disable other command forms
            function hideAndDisableCommands() {
                commands.hide().find('input, select').prop('disabled', true);
            }

            // Reset the power schedule selection
            function resetPowerSchedule() {
                $powerSchedule.val('off');
                $daysOfTheWeek.val('').prop('disabled', true);
            }

            // Show and hide additional power schedule options
            function togglePowerScheduleDetails(mode) {
                if (mode === 'off') {
                    $('.onTime, .offTime, .power-schedule-days').hide();
                } else {
                    const isWeekly = (mode === 'weekly');
                    $('.power-schedule-days').toggle(isWeekly);
                    $powerScheduleDays.prop('disabled', !isWeekly);

                    $('.onTime, .offTime').show().find('input').prop('disabled', false);
                }
            }

            // Save daysOfTheWeek as a comma-separated value (i.e. mon,tue,wed)
            function updateDaysOfTheWeek() {
                const csv = $powerScheduleDays.val()?.join(',') || '';
                $daysOfTheWeek.val(csv).prop('disabled', false);
            }

            hideAndDisableCommands();

            $('#commandId').on('change', function () {
                const selectedValue = $(this).find('option:selected').text(); // Get the selected value

                hideAndDisableCommands();

                let command;

                // Show specific elements based on the selected value
                switch (selectedValue) {
                    case 'Screen':
                        command = $('input[name="screen"]').closest('.form-group').show();
                        break;
                    case 'Rotate':
                        command = $('select[name="rotation"]').closest('.form-group').show();
                        break;
                    case 'Mute':
                        command = $('input[name="mute"]').closest('.form-group').show();
                        break;
                    case 'Pro-mode':
                        command = $('input[name="mode"]').closest('.form-group').show();
                        break;
                    case 'Brightness':
                        command = $('input[name="brightness"]').closest('.form-group').show();
                        break;
                    case 'Power Schedule':
                        command = $powerSchedule.closest('.form-group').show();
                        break;
                    default:
                        command = null;
                }

                if (command) {
                    resetPowerSchedule();
                    command.show().find('input, select').prop('disabled', false);
                }
            });

            $powerSchedule.on('change', function () {
                togglePowerScheduleDetails($(this).val());
            });

            // Save daysOfTheWeek as a comma-separated value
            $powerScheduleDays.on('change', updateDaysOfTheWeek);
        });
    </script>
{% endblock %}
